{"version":3,"sources":["images/plant_feature.png","components/Home.js","components/Header.js","components/Footer.js","ServerURL.js","components/SignUp.js","components/SignIn.js","components/SignOut.js","components/PlantContainer.js","components/PlantForm.js","components/CreatePlant.js","components/EditPlant.js","components/UserProfile.js","components/Users.js","components/Bookings.js","components/Rating.js","components/PlantInfo.js","quizService/index.js","components/QuestionBox.js","components/Result.js","components/Quiz.js","Routes.js","serviceWorker.js","index.js","images/leaf_dark.png","images/leaf_green.png","images/avatars/boy-1.svg","images/avatars/boy.svg","images/avatars/girl-1.svg","images/avatars/girl.svg","images/avatars/man-1.svg","images/avatars/man-2.svg","images/avatars/man-3.svg","images/avatars/man-4.svg","images/avatars/man.svg"],"names":["module","exports","Home","class","src","feature","className","Header","state","image","_handleHover","bind","_handleOut","console","log","this","setState","logo_green","logo","to","onMouseOver","onMouseOut","localStorage","getItem","Component","Footer","serverURL","path","SignUp","name","email","password","confirm_password","seller","_handleSumbit","_handleInputName","_handleInputEmail","_handleInputPassword","_handleInputPasswordConfirmation","_handleInputSeller","event","preventDefault","url","axios","post","user","password_confirmation","is_seller","then","results","loginURL","auth","data","window","setItem","jwt","props","history","push","location","reload","catch","error","target","value","onSubmit","htmlFor","type","id","onChange","SignIn","SignOut","removeItem","SERVER_URL","PlantContainer","plants","query","_handleSubmit","_handleInputSearch","fetchPlants","get","result","setTimeout","onInput","Gallery","map","plant","plantpara","key","cloudName","publicId","images","width","toLowerCase","indexOf","PlantForm","date_from","date_to","onTextChange","onFileChange","age","status","cost","worth","description","todayButton","selected","selectsStart","startDate","endDate","onDateFromChange","placeholderText","selectsEnd","onDateToChange","buttonLabel","PLANT_API","PLANT_IMAGE_API","CreatePlant","handleChange","handleDateFromChange","handleDateToChange","handleSubmit","handleFileChange","file","files","token","method","headers","formData","FormData","append","plantImage","res","heading","EditPlant","match","params","UserProfile","response","randomImg","avatar1","avatar2","avatar3","avatar4","avatar5","avatar6","avatar7","avatar8","avatar9","max","length","Math","floor","random","profileImg","admin","Users","users","Bookings","Rating","rating","i","r","leaf_filled","leaf_outline","PlantInfo","plantInfo","availability","bookings","comments","comment","Date","handleChangeStart","handleChangeEnd","_handleSubmitComment","_handleChangeRating","_handleChangeComment","plant_id","URL","AVAIL","BOOKINGS","COMMENTS","fetchPlantInfo","fetchComments","date","from","booking","listDate","bookedDates","p","dateFrom","dateTo","d","setDate","getDate","b","highlighted","minDate","maxDate","highlightDates","excludeDates","c","moment","updated_at","format","required","qBank","question","answers","correct","questionID","n","Promise","resolve","sort","slice","QuestionBox","options","useState","answer","setAnswer","text","index","onClick","Result","score","playAgain","Quiz","questionBank","responses","getQuestions","quizService","computeAnswer","correctAnswer","ReactDOM","render","document","getElementById","Routes","exact","component","Boolean","hostname","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0718eaa9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/plant_feature.841213cf.png\";","import React from 'react';\n// import PlantContainer from './PlantContainer';\nimport { Link } from 'react-router-dom';\nimport feature from '../images/plant_feature.png';\nimport '../style/header_art.css';\n\nfunction Home() {\n  return (\n    <div>\n        <h1 class=\"greenify-text\">Greenify</h1>\n        <img src={ feature } className=\"featureImage\" />\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport logo from '../images/leaf_dark.png';\nimport logo_green from '../images/leaf_green.png';\n\n// Created this class to test authentication.\n// Only shows all plants if you have logged in, otherwise you are not allowed.\n// this is set through the plants controller in rails, by including: before_action :authenticate_user\nclass Header extends Component {\n  constructor () {\n    super();\n    this.state = {\n      image: \"\"\n    }\n\n    this._handleHover = this._handleHover.bind(this);\n    this._handleOut = this._handleOut.bind(this);\n  }\n\n  _handleHover () {\n    console.log(\"hover\");\n    this.setState({image: logo_green });\n  }\n\n  _handleOut () {\n    console.log(\"out\");\n    this.setState({image: logo });\n  }\n\n  render() {\n    return (\n      <div className=\"nav\">\n        <Link to={ '/' } className=\"headerTitle\"><h1 onMouseOver={ this._handleHover } onMouseOut={ this._handleOut } >greenify<img src={ logo } className=\"logo nohover\" /><img src={ logo_green } className=\"logo hover\" /></h1></Link>\n        <div className=\"links\">\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/plants\">Plants</Link>\n          <Link to=\"/plants/new\">Add Plant</Link>\n          <Link to=\"/quiz\">Quiz</Link>\n          <Link to=\"/users\">Users</Link>\n\n          { localStorage.getItem(\"jwt\") ?\n\n              <Link to=\"/SignOut\">Sign Out</Link>\n              :\n              <span><Link to=\"/SignIn\">Sign In</Link> or\n              <Link to=\"/SignUp\"> Sign Up</Link></span>\n          }\n\n        </div>\n      </div>)\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport \"../style/plant_art.css\";\n\n// Created this class to test authentication.\n// Only shows all plants if you have logged in, otherwise you are not allowed.\n// this is set through the plants controller in rails, by including: before_action :authenticate_user\nclass Footer extends Component {\n  constructor () {\n    super();\n    this.state = {\n\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"footer\">\n      <span>&copy; greenify 2019</span>\n      <div className=\"footerPos\">\n\n        <div class=\"plantContainer\">\n          <div class=\"plant\">\n          \t<div class=\"branch\"></div>\n          \t<div class=\"branch\"></div>\n          \t<div class=\"branch\"></div>\n          \t<div class=\"branch\"></div>\n          \t<div class=\"branch\"></div>\n          \t<div class=\"branch\"></div>\n          </div>\n        </div>\n        </div>\n      </div>)\n  }\n}\n\nexport default Footer;\n","const serverURL = function (path) {\n    // return \"http://localhost:3000/\" + path;\n  return \"https://greenify-your-life.herokuapp.com/\" + path;\n};\n\nexport default serverURL;\n\n// import serverURL from \"../ServerURL\";\n// serverURL(path);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport serverURL from \"../ServerURL\";\n\n\nclass SignUp extends Component {\n  constructor () {\n    super();\n    this.state = {\n      // Update state values with input field as user makes changes through functions below (_handleInput...)\n      name: \"\",\n      email: \"\",\n      password: \"\",\n      confirm_password: \"\",\n      seller: false,\n    }\n\n    // Bind all functions that use 'this'\n    this._handleSumbit = this._handleSumbit.bind(this);\n    this._handleInputName = this._handleInputName.bind(this);\n    this._handleInputEmail = this._handleInputEmail.bind(this);\n    this._handleInputPassword = this._handleInputPassword.bind(this);\n    this._handleInputPasswordConfirmation = this._handleInputPasswordConfirmation.bind(this);\n    this._handleInputSeller = this._handleInputSeller.bind(this);\n  }\n\n  _handleSumbit (event) {\n    event.preventDefault();\n    // AJAX post request to create user.\n    const url = serverURL(\"/api/users\");\n    axios.post(url, {\n      user: {\n        name: this.state.name,\n        email: this.state.email,\n        password: this.state.password,\n        password_confirmation: this.state.confirm_password,\n        is_seller: this.state.seller\n      }\n    }).then((results) => {\n      console.log(results);\n      // TODO: After they sign up, logthem in and redirect to home.\n\n        // AJAX post request to create user.\n        const loginURL = serverURL(\"api/user_token\");\n        axios.post(loginURL, {\n          auth: {\n            email: this.state.email,\n            password: this.state.password,\n          }\n        })\n        .then((results) => {\n          console.log(results.data);\n          console.log(window)\n          localStorage.setItem(\"jwt\", results.data.jwt);\n          this.props.history.push(\"/\");\n          window.location.reload();\n        })\n        .catch(error => console.log('error', error));\n    });\n  }\n\n  // Use event value to update state value with text user inputs in field\n  _handleInputName (event) {\n    this.setState({\n      name: event.target.value,\n    });\n  }\n\n  _handleInputEmail (event) {\n    this.setState({\n      email: event.target.value,\n    });\n  }\n\n  _handleInputPassword (event) {\n    this.setState({\n      password: event.target.value,\n    });\n  }\n\n  _handleInputPasswordConfirmation (event) {\n    this.setState({\n      confirm_password: event.target.value,\n    });\n  }\n\n  _handleInputSeller (event) {\n    this.setState({\n      seller: (this.state.seller ? false : true)\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"centerForm\">\n        <form onSubmit={ this._handleSumbit } >\n          <label htmlFor=\"name\">\n            Name:\n            <input type=\"text\" id=\"name\" onChange={ this._handleInputName } />\n          </label>\n\n          <label htmlFor=\"email\">\n            Email:\n            <input type=\"email\" id=\"email\" onChange={ this._handleInputEmail } />\n          </label>\n\n          <label htmlFor=\"password\">\n            Password:\n            <input type=\"password\" id=\"password\" onChange={ this._handleInputPassword } />\n          </label>\n\n          <label htmlFor=\"confirm_password\">\n            Confirm Password:\n            <input type=\"password\" id=\"confirm_password\" onChange={ this._handleInputPasswordConfirmation } />\n          </label>\n\n          <label htmlFor=\"seller\">\n            Seller:\n            <input type=\"checkbox\" id=\"seller\" onChange={ this._handleInputSeller } />\n          </label>\n\n          <input type=\"submit\" value=\"Create User\" />\n        </form>\n      </div>)\n  }\n}\n\nexport default SignUp;\n","import React, { Component } from 'react';\nimport { Link, Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport serverURL from \"../ServerURL\";\n\n\nclass SignIn extends Component {\n  constructor () {\n    super();\n    this.state = {\n      // Update state values with input field as user makes changes through functions below (_handleInput...)\n      name: \"\",\n      email: \"\",\n      password: \"\",\n    }\n\n    // Bind all functions that use 'this'\n    this._handleSumbit = this._handleSumbit.bind(this);\n    this._handleInputEmail = this._handleInputEmail.bind(this);\n    this._handleInputPassword = this._handleInputPassword.bind(this);\n\n  }\n\n  _handleSumbit (event) {\n    event.preventDefault();\n    // AJAX post request to create user.\n    const url = serverURL(\"api/user_token\");\n    axios.post(url, {\n      auth: {\n        email: this.state.email,\n        password: this.state.password,\n      }\n    })\n    .then((results) => {\n      console.log(results.data);\n      console.log(window)\n      localStorage.setItem(\"jwt\", results.data.jwt);\n      this.props.history.push(\"/\");\n      window.location.reload();\n    })\n    .catch(error => console.log('error', error));;\n  }\n\n  _handleInputEmail (event) {\n    this.setState({\n      email: event.target.value,\n    });\n  }\n\n  _handleInputPassword (event) {\n    this.setState({\n      password: event.target.value,\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"centerForm\">\n        <form onSubmit={ this._handleSumbit } >\n          <label htmlFor=\"email\">\n            Email:\n            <input type=\"email\" id=\"email\" onChange={ this._handleInputEmail } />\n          </label>\n\n          <label htmlFor=\"password\">\n            Password:\n            <input type=\"password\" id=\"password\" onChange={ this._handleInputPassword } />\n          </label>\n\n          <input type=\"submit\" value=\"Sign In\" />\n        </form>\n      </div>)\n  }\n}\n\nexport default SignIn;\n","import React from 'react';\nimport { Redirect } from 'react-router-dom'\n\nconst SignOut = () => {\n  localStorage.removeItem('jwt');\n  window.location.reload();\n  return <Redirect to='/signin' />\n}\n\nexport default SignOut;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport serverURL from \"../ServerURL\";\n\nconst SERVER_URL = serverURL('plants.json');\n\n\nclass PlantContainer extends Component {\n  constructor() {\n      super();\n      this.state={\n        plants : [],\n        query : \"\"\n      };\n\n    this._handleSubmit = this._handleSubmit.bind(this);\n    this._handleInputSearch = this._handleInputSearch.bind(this);\n\n\n\n\n    const fetchPlants =() => {\n      axios.get(SERVER_URL).then((result) => {\n        this.setState({plants: result.data});\n        console.log(this.state.plants);\n        setTimeout(fetchPlants, 40000);\n      });\n    };\n    fetchPlants();\n  }\n\n    _handleSubmit (event) {\n      event.preventDefault();\n      this.setState({query: '' })\n      console.log(\"click\");\n    }\n\n    _handleInputSearch (event) {\n      this.setState({\n      query: event.target.value,})\n      console.log(event.target.value);\n    }\n\n  render(){\n    return(\n      <div className=\"centerForm\">\n        <h2>This is a plant area. See our plants:</h2>\n        <form onSubmit={this._handleSubmit}>\n\n        <label htmlFor=\"query\">\n        <p>Search:</p>\n        <input type=\"search\" id=\"query\" onInput={ this._handleInputSearch } />\n        </label>\n        <input type=\"submit\" value=\"Filter\" />\n        </form>\n\n        <Gallery plants={this.state.plants} query={this.state.query}/>\n      </div>\n    )\n  }\n}\n\n\n\nclass Gallery extends Component {\n  render() {\n    return(\n      <div className=\"allPlantsGrid\">\n        {this.props.plants.map((plant) => {\n\n          const plantpara = <p key={plant.id}>\n             {plant.name}\n             <Link to={ \"/plants/\" + plant.id }>\n             <Image cloudName=\"dto4pzoz6\" publicId={plant.images} width=\"300\" className=\"allPlantsShow\" />\n             </Link>\n           </p>;\n           console.log(plantpara);\n           const query = this.props.query.toLowerCase();\n           const name = plant.name.toLowerCase();\n\n            if (name.indexOf(query) !== -1){\n              return plantpara;\n            }\n       })\n      }\n    </div>\n    )\n  }\n}\n\n\nexport default PlantContainer;\n","import React, {Component} from 'react';\n// use moment.js to deal with formatting dates.\nimport moment from \"moment\";\n// Datepicker allows you to pick dates from a dropdown calendar.\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n\nclass PlantForm extends Component {\n  constructor(){\n    super();\n    this.state = {\n      date_from: \"\",\n      date_to: \"\"\n    }\n\n  }\n\n\n render() {\n     return (\n       <div className=\"centerForm\">\n           <form onSubmit={this.props.onSubmit}>\n             <label>\n               Name:\n               <input type=\"text\" name=\"name\" value={this.props.plant.name} onChange={this.props.onTextChange} />\n             </label><br/>\n             <label>\n               image:\n                 <input type=\"file\" name=\"file\" onChange={this.props.onFileChange} />\n             </label><br/>\n             <label>\n               Age:\n                 <input type=\"text\" name=\"age\" value={this.props.plant.age} onChange={this.props.onTextChange} />\n             </label><br/>\n             <label>\n               Status:\n                 <input type=\"text\" name=\"status\" value={this.props.plant.status} onChange={this.props.onTextChange} />\n             </label><br/>\n             <label>\n               Cost:\n                 <input type=\"text\" name=\"cost\" value={this.props.plant.cost} onChange={this.props.onTextChange}/>\n             </label><br/>\n             <label>\n               Worth:\n                 <input type=\"text\" name=\"worth\" value={this.props.plant.worth} onChange={this.props.onTextChange}/>\n             </label><br/>\n             <label>\n               Desciption:\n                 <textarea name=\"description\" value={this.props.plant.description} onChange={this.props.onTextChange}/>\n             </label><br/>\n\n             <label>\n              Availability:\n              <div class=\"plantProfileBookingGrid\">\n                <span>\n                  <p>From:</p>\n                  <DatePicker\n                      name= \"date_from\"\n                      todayButton={\"Today\"}\n                      selected={this.props.date_from}\n                      selectsStart\n                      startDate={this.props.date_from}\n                      endDate={this.props.date_to}\n                      onChange={this.props.onDateFromChange}\n                      placeholderText=\"Select a Start Date\"\n                    />\n                  </span>\n                  <span>\n                    <p>To:</p>\n                    <DatePicker\n                        name= \"date_to\"\n                        todayButton={\"Today\"}\n                        selected={this.props.date_to}\n                        selectsEnd\n                        startDate={this.props.date_from}\n                        endDate={this.props.date_to}\n                        onChange={this.props.onDateToChange}\n                        placeholderText=\"Select an End Date\"\n                    />\n                  </span>\n                </div>\n              </label><br />\n\n               <input type=\"submit\" value= {this.props.buttonLabel} />\n             </form>\n         </div>\n     )\n   }\n }\n\n export default PlantForm;\n","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport PlantForm from './PlantForm';\nimport serverURL from \"../ServerURL\";\n\nconst PLANT_API = serverURL('plants');\nconst PLANT_IMAGE_API = serverURL('plants/');\n\nclass CreatePlant extends Component {\n  constructor(){\n    super();\n    this.state = {\n    }\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleDateFromChange = this.handleDateFromChange.bind(this);\n    this.handleDateToChange = this.handleDateToChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleFileChange = this.handleFileChange.bind(this);\n  }\n\n\n  handleChange(event) {\n    this.setState({ [event.target.name]: event.target.value});\n  }\n\n  handleDateFromChange(event) {\n    console.log(\"from\");\n    this.setState({ date_from: event});\n  }\n\n  handleDateToChange(event) {\n    this.setState({ date_to: event});\n  }\n\n  handleFileChange(event) {\n    this.setState({ file: event.target.files[0] });\n  }\n\n  handleSubmit(event) {\n      event.preventDefault();\n\n      //1. Create plant object by collecting different attributes from state.\n      const { name, age, status, cost, worth, description } = this.state;\n      const plant = {name, age, status, cost, worth, description};\n      //2. Plant object doesn't have image/file, since file is uploaded as Multipart Form Data request in HTTP **. (read more at https://stackoverflow.com/questions/16958448/what-is-http-multipart-request)\n      //** - Although there is a workaround to encode file in base64 and then use it in json payload. ////However this is not recommended.\n\n      // // to get the token and send it through the header, you need to add \"bearer\" with a space after it at the beginning.\n      const token = \"Bearer \" + localStorage.getItem(\"jwt\");\n\n      //File upload is handled in two step process, since Create Plant is a REST based API, which does not handle file upload directly.\n      // a. first we create new plant object in server without images by calling /POST endpoint.\n      // b. once the plant is created, we updated the plant with /PUT call which is not REST call but actually a multipart form submit which includes file. On server side, this PUT request will get the file content and upload it in Cloudinary and then update the plant object.\n\n      axios({method: 'post', url: PLANT_API, headers: {'Authorization': token}, data: { plant }})\n        .then(result => {\n          const formData = new FormData();\n          formData.append('file', this.state.file);\n            console.log(formData)\n            console.log(this.state.file);\n             const plantImage = PLANT_IMAGE_API + result.data.id + '.json';\n             axios({method: 'put', url: plantImage, headers: {'Authorization': token}, data: formData })\n               .then(res => {\n                 this.props.history.push('/plants');\n               });\n\n          //this.props.history.push(\"/plants\");\n\n        })\n        .catch(error => {\n          console.log(error);\n        });\n  }\n\n  render() {\n    return (\n      <div className=\"centerForm\">\n        <h2> Create New Plant </h2>\n        <PlantForm\n          heading = \"Create New Plant\"\n          onTextChange={this.handleChange}\n          onFileChange={this.handleFileChange}\n          onDateFromChange={this.handleDateFromChange}\n          onDateToChange={this.handleDateToChange}\n          date_from={this.state.date_from}\n          date_to={this.state.date_to}\n          onSubmit={this.handleSubmit}\n          buttonLabel = \"Add Plant\"\n          plant={{}} />\n      </div>\n\n    )\n  }\n}\n\n\nexport default CreatePlant;\n","import React, {Component} from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport PlantForm from './PlantForm';\nimport { Image } from 'cloudinary-react';\nimport serverURL from \"../ServerURL\";\n\n\nconst PLANT_API = serverURL('plants.json');\nconst PLANT_IMAGE_API = serverURL('plants/');\n\n\nclass EditPlant extends Component {\n\nconstructor(props) {\n  super(props);\n  this.state = {\n    plant: {}\n  };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleFileChange = this.handleFileChange.bind(this);\n  }\n\n\n  handleChange(event) {\n    this.setState({ plant: {...this.state.plant, [event.target.name]: event.target.value}});\n  }\n\n  handleFileChange(event) {\n    this.setState({ file: event.target.files[0] });\n  }\n\n  handleSubmit(event) {\n      event.preventDefault();\n\n      //1. Create plant object by collecting different attributes from state.\n      const plant = { ...this.state.plant };\n\n      console.log('saving plant', plant);\n\n\n      //2. Plant object doesn't have image/file, since file is uploaded as Multipart Form Data request in HTTP **. (read more at https://stackoverflow.com/questions/16958448/what-is-http-multipart-request)\n      //** - Although there is a workaround to encode file in base64 and then use it in json payload. ////However this is not recommended.\n\n      // // to get the token and send it through the header, you need to add \"bearer\" with a space after it at the beginning.\n      const token = \"Bearer \" + localStorage.getItem(\"jwt\");\n\n      //File upload is handled in two step process, since Create Plant is a REST based API, which does not handle file upload directly.\n      // a. first we create new plant object in server without images by calling /POST endpoint.\n      // b. once the plant is created, we updated the plant with /PUT call which is not REST call but actually a multipart form submit which includes file. On server side, this PUT request will get the file content and upload it in Cloudinary and then update the plant object.\n\n      axios({method: 'patch', url: serverURL(`plants/${plant.id}`), headers: {'Authorization': token}, data: { plant }})\n        .then(result => {\n          const file = new FormData();\n          if(this.state.file)\n            file.append('file', this.state.file);\n\n           axios({method: 'put', url: serverURL(`plants/${plant.id}`), data: file, headers:       {'Authorization': token} })\n             .then(res => {\n               this.props.history.push(`/plants/${plant.id}`);\n             });\n          //this.props.history.push(\"/plants\");\n\n        })\n        .catch(error => {\n          console.log(error);\n        });\n  }\n  componentDidMount() {\n    const token = \"Bearer \" + localStorage.getItem(\"jwt\");\n\n    axios({method: 'get', url: serverURL(`plants/${this.props.match.params.id}`), headers: {'Authorization': token}})\n            .then(result => {\n\n              console.log(result);\n              this.setState ({\n                plant: result.data\n              })\n            });\n        }\n\n\n\n\n    render() {\n\n      return (\n        <div className=\"centerForm\">\n          <h2> Edit form </h2>\n          <Image cloudName=\"dto4pzoz6\" publicId={this.state.plant.images} width=\"300\" />\n\n        <PlantForm\n          onTextChange={this.handleChange}\n          onFileChange={this.handleFileChange}\n          onSubmit={this.handleSubmit}\n          buttonLabel = \"Plant Edited\"\n          plant={ this.state.plant }\n        />\n        </div>\n      )\n    }\n }\n\n\n\n\nexport default EditPlant;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport serverURL from \"../ServerURL\";\nimport avatar1 from \"../images/avatars/boy-1.svg\"\nimport avatar2 from \"../images/avatars/boy.svg\"\nimport avatar3 from \"../images/avatars/girl-1.svg\"\nimport avatar4 from \"../images/avatars/girl.svg\"\nimport avatar5 from \"../images/avatars/man-1.svg\"\nimport avatar6 from \"../images/avatars/man-2.svg\"\nimport avatar7 from \"../images/avatars/man-3.svg\"\nimport avatar8 from \"../images/avatars/man-4.svg\"\nimport avatar9 from \"../images/avatars/man.svg\"\n\n// Created this class to test authentication.\n// Only shows all plants if you have logged in, otherwise you are not allowed.\n// this is set through the plants controller in rails, by including: before_action :authenticate_user\nclass UserProfile extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      user: \"\"\n    }\n\n    console.log(this)\n    const url = serverURL(\"/api/users/\" + this.props.match.params.id);\n    // to get the token and send it through the header, you need to add \"bearer\" with a space after it at the beginning.\n    const token = \"Bearer \" + localStorage.getItem(\"jwt\");\n    const getPlants = function () {\n      // make a post request with a header with Auth token sent through. Will only send if logged in, otherwise will cause error.\n      axios.get(url)\n      .then(response => {\n        this.setState({ user: response.data })\n      })\n      .catch(error => console.log('error', error));\n    }.bind(this)();\n\n    this.randomImg = this.randomImg.bind(this);\n\n  }\n\n  randomImg () {\n    const images = [ avatar1, avatar2, avatar3, avatar4, avatar5, avatar6, avatar7, avatar8, avatar9 ];\n    const max = images.length;\n    const randomNum = Math.floor(Math.random() * max);\n    return images[randomNum];\n  }\n\n  render() {\n    const profileImg = this.randomImg();\n    const user = this.state.user;\n    return (\n      <div className=\"userProfile\">\n            <div key={this.state.user.id}>\n              <h2>{this.state.user.name}</h2>\n              <img src={ profileImg } className=\"profile\" />\n              {this.state.user.email}\n              {this.state.user.admin}\n              {this.state.user.is_seller}\n            </div>\n      </div>)\n  }\n}\n\nexport default UserProfile;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport serverURL from \"../ServerURL\";\nimport avatar1 from \"../images/avatars/boy-1.svg\"\nimport avatar2 from \"../images/avatars/boy.svg\"\nimport avatar3 from \"../images/avatars/girl-1.svg\"\nimport avatar4 from \"../images/avatars/girl.svg\"\nimport avatar5 from \"../images/avatars/man-1.svg\"\nimport avatar6 from \"../images/avatars/man-2.svg\"\nimport avatar7 from \"../images/avatars/man-3.svg\"\nimport avatar8 from \"../images/avatars/man-4.svg\"\nimport avatar9 from \"../images/avatars/man.svg\"\n\n// Created this class to test authentication.\n// Only shows all plants if you have logged in, otherwise you are not allowed.\n// this is set through the plants controller in rails, by including: before_action :authenticate_user\nclass Users extends Component {\n  constructor () {\n    super();\n    this.state = {\n      users: []\n    }\n\n\n    const url = serverURL(\"api/users\");\n    // to get the token and send it through the header, you need to add \"bearer\" with a space after it at the beginning.\n    const token = \"Bearer \" + localStorage.getItem(\"jwt\");\n    const getPlants = function () {\n      // make a post request with a header with Auth token sent through. Will only send if logged in, otherwise will cause error.\n      axios({method: 'get', url: url, headers: {'Authorization': token }})\n      .then(response => {\n        this.setState({ users: response.data })\n      })\n      .catch(error => console.log('error', error));\n    }.bind(this)();\n\n    this.randomImg = this.randomImg.bind(this);\n  }\n\n  randomImg () {\n    const images = [ avatar1, avatar2, avatar3, avatar4, avatar5, avatar6, avatar7, avatar8, avatar9 ];\n    const max = images.length;\n    const randomNum = Math.floor(Math.random() * max);\n    return images[randomNum];\n  }\n\n  render() {\n    return (\n      <div className=\"profileGrid\" >\n      {this.state.users.map((user) => {\n          return(\n            <div key={user.id}>\n              <h2><img src={ this.randomImg() } className=\"profileSmall\" /> <Link to={`/users/${user.id}`}>{user.name}</Link></h2>\n              {user.email}\n              {user.admin}\n              {user.is_seller}\n            </div>\n          )\n        })}\n      </div>)\n  }\n}\n\nexport default Users;\n","import React, {Component} from 'react';\n\n\nclass Bookings extends Component {\n  render() {\n    return (\n\n      <div className=\"bookings\">\n\n      </div>)\n  }\n\n}\n\n\nexport default Bookings;\n","import React, { Component } from 'react';\nimport leaf_filled from '../images/leaf_green.png';\nimport leaf_outline from '../images/leaf_dark.png';\n\nclass Rating extends Component {\n  constructor (props) {\n    super(props);\n  }\n\n  render() {\n\n    const rating = [];\n    for (let i=0; i < this.props.rating; i++) {\n      rating.push(1);\n    }\n    while (rating.length < 5) {\n      rating.push(0);\n    }\n\n    return (\n      <span className=\"commentRating\">\n          {rating.map((r) => {\n            if (r === 1) {\n              return <img className=\"ratingImg\" src={ leaf_filled } />\n            }\n            else if (r === 0) {\n              return <img className=\"ratingImg\" src={ leaf_outline } />\n            }\n          })}\n      </span>\n      )\n  }\n}\n\nexport default Rating;\n","import React, { Component } from 'react';\nimport Rating from './Rating';\nimport axios from 'axios';\nimport { Image } from 'cloudinary-react';\nimport { Link } from 'react-router-dom';\nimport serverURL from \"../ServerURL\";\n// use moment.js to deal with formatting dates.\nimport moment from \"moment\";\n// Datepicker allows you to pick dates from a dropdown calendar.\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nclass PlantInfo extends Component {\nconstructor(props){\n  super(props);\n  this.state= {\n    plantInfo : [],\n    availability : [],\n    bookings: [],\n    comments: [],\n    comment: \"\",\n    rating: \"\",\n    startDate: new Date(),\n    endDate: new Date(),\n  }\n  // Handles the change of the start and end date teh user picks\n  this.handleChangeStart = this.handleChangeStart.bind(this);\n  this.handleChangeEnd = this.handleChangeEnd.bind(this);\n  this._handleSubmit = this._handleSubmit.bind(this);\n  this._handleSubmitComment = this._handleSubmitComment.bind(this);\n  this._handleChangeRating = this._handleChangeRating.bind(this);\n  this._handleChangeComment = this._handleChangeComment.bind(this);\n\n  const plant_id = this.props.match.params.id;\n  const URL = serverURL(\"plants/\" + plant_id + \".json\");\n  const  AVAIL =  serverURL('plants/'+ plant_id +'/availabilities');\n  const  BOOKINGS =  serverURL('plants/'+ plant_id +'/bookings');\n  const  COMMENTS =  serverURL('plants/'+ plant_id +'/comments');\n\n  const fetchPlantInfo =() => {\n    axios.get(URL).then((result) => {\n      this.setState({plantInfo: result.data});\n      console.log(result.data[0]);\n      setTimeout(fetchPlantInfo, 40000);\n    });\n  };\n  fetchPlantInfo();\n  const fetchAva =() => {\n    axios.get(AVAIL).then((result) => {\n    this.setState({availability: result.data});\n    console.log(result.data);\n    // setTimeout(fetchAva, 40000);\n    });\n    };\n  fetchAva();\n  const fetchBookings =() => {\n    axios.get(BOOKINGS).then((result) => {\n    this.setState({ bookings: result.data});\n    });\n    };\n  fetchBookings();\n\n  const fetchComments =() => {\n    axios.get(COMMENTS).then((result) => {\n    this.setState({ comments: result.data});\n    });\n    setTimeout(fetchComments, 4000);\n    };\n  fetchComments();\n}\n  // Handles the change of the start date teh user picks\n  handleChangeStart(date) {\n      this.setState({\n        startDate: date\n      });\n    }\n  // Handles the change of the end date teh user picks\n  handleChangeEnd(date) {\n      this.setState({\n        endDate: date\n      });\n    }\n  _handleSubmit (event) {\n    event.preventDefault();\n    let from = this.state.startDate\n    let to = this.state.endDate\n    console.log(\"from \" + from);\n    console.log(\"to \" + to);\n    const token = \"Bearer \" + localStorage.getItem(\"jwt\");\n    axios({method: 'post', url: serverURL(`plants/${ this.props.match.params.id }/bookings`), headers: {'Authorization': token}, data: {\n      booking: {\n        from: from,\n        to: to\n      }\n    }}).then(() => window.location.reload());\n  }\n\n  _handleSubmitComment (event) {\n    event.preventDefault();\n\n    const token = \"Bearer \" + localStorage.getItem(\"jwt\");\n    axios({method: 'post', url: serverURL(`plants/${ this.props.match.params.id }/comments`), headers: {'Authorization': token}, data: {\n      comment: {\n        comment: this.state.comment,\n        rating: this.state.rating,\n      }\n\n    }}).then(() => window.location.reload());\n  }\n\n  _handleChangeComment (event) {\n    this.setState({comment: event.target.value});\n  }\n\n  _handleChangeRating (event) {\n    this.setState({rating: event.target.value});\n  }\n\n\nrender(){\n  let listDate = [];\n  let startAvailableDate = \"\";\n  let endAvailableDate = \"\";\n  let startDate = this.state.availability.map((p) => {\n        // generate a Date for from and to values.\n        const dateFrom = new Date(p.from);\n        const dateTo = new Date(p.to);\n        // .getDate() returns the day of the month, if it is the 6th of August, it will return 6.\n        // .setDate() sets the date, so by running this instead of d++, we are incrementing the date every loop.\n        // Loop through dates from the start date until the end date, each loop increment the date by 1.\n        // inside loop, push the day into the array.\n        for (var d = dateFrom; d <= dateTo; d.setDate(d.getDate() + 1)) {\n            listDate.push(new Date(d));\n        }\n      });\n      // use this array to populate with all the dates that have already been booked\n      // to do this, filter through all the bookings, then add each date to this list.\n      let bookedDates = [ ];\n      this.state.bookings.map((b) => {\n        // generate a Date for from and to values.\n        const dateFrom = new Date(b.from);\n        const dateTo = new Date(b.to);\n        for (let b = dateFrom; b <= dateTo; b.setDate(b.getDate() + 1)) {\n            bookedDates.push(new Date(b));\n        }\n      })\n      // TODO: filter through dates to make an availableDates list, and apply a style to that.\n      const highlighted = [{ \"bookedDates\": bookedDates }];\n  return(\n    <div>\n      <h1 className=\"plantProfileTitle\">{this.state.plantInfo.name}</h1>\n      <div className=\"plantProfileGrid\">\n        <div className=\"plantProfileImage\">\n          <Image cloudName=\"dto4pzoz6\" publicId={this.state.plantInfo.images} width=\"300\" />\n        </div>\n        <div className=\"plantProfileStats\">\n          <p><span className=\"plantProfileBold\">Age: </span>{this.state.plantInfo.age}</p>\n          <p><span className=\"plantProfileBold\">Cost: </span>${this.state.plantInfo.cost}</p>\n          <p><span className=\"plantProfileBold\">Worth: </span>${this.state.plantInfo.worth}</p>\n          <p><span className=\"plantProfileBold\">Description: </span>{this.state.plantInfo.description}</p>\n        </div>\n        <div className=\"plantProfileBookingDates\">\n        <h3>Book this plant:</h3>\n        <div class=\"plantProfileBookingGrid\">\n          <span>\n            <p>From:</p>\n            <DatePicker\n                todayButton={\"Today\"}\n                selected={this.state.startDate}\n                selectsStart\n                startDate={this.state.startDate}\n                endDate={this.state.endDate}\n                onChange={this.handleChangeStart}\n                minDate={ listDate[0] }\n                maxDate={ listDate[listDate.length - 1] }\n                highlightDates={ highlighted }\n                excludeDates={ bookedDates }\n                placeholderText=\"Select a Start Date\"\n              />\n            </span>\n            <span>\n              <p>To:</p>\n              <DatePicker\n                  todayButton={\"Today\"}\n                  selected={this.state.endDate}\n                  selectsEnd\n                  startDate={this.state.startDate}\n                  endDate={this.state.endDate}\n                  onChange={this.handleChangeEnd}\n                  minDate={ listDate[0] }\n                  maxDate={ listDate[listDate.length - 1] }\n                  highlightDates={ highlighted }\n                  excludeDates={ bookedDates }\n                  placeholderText=\"Select an End Date\"\n              />\n            </span>\n          </div>\n          <form onSubmit={ this._handleSubmit }>\n            <input type=\"submit\" value=\"Book Now\" />\n          </form>\n        </div>\n      </div>\n      <div className=\"commentSection\">\n      <h3>Comments</h3>\n        {this.state.comments.map((c) => {\n          return <div className=\"comment\">\n          <p><Rating rating={ c.rating } /> <span className=\"commentTime\">- <Link to={ `/users/${ c.user.id }` }>{ c.user.name }</Link> on { moment(c.updated_at).format(\"LLL\") }</span></p>\n          <p>{ c.comment }</p>\n\n          </div>\n        })}\n\n        <h3>Make a comment</h3>\n        <form onSubmit={ this._handleSubmitComment }>\n        Rating:\n          <select onChange={ this._handleChangeRating } required>\n            <option value=\"1\">1</option>\n            <option value=\"2\">2</option>\n            <option value=\"3\">3</option>\n            <option value=\"4\">4</option>\n            <option value=\"5\">5</option>\n          </select>\n\n        Comment:\n          <input type=\"textarea\" onChange={ this._handleChangeComment } required/>\n          <input type=\"submit\" value=\"sumbit\" />\n        </form>\n      </div>\n      <div className=\"plantProfileButtonArea\"><Link to={\"/plants/\"+ this.props.match.params.id +\"/edit\"}>Edit Plant</Link></div>\n    </div>\n  )\n}\n}\nexport default PlantInfo;\n","let qBank = [{\n  question: \"What percentage of life is found in the ocean?\",\n  answers: [\"85%\", \"50%\", \"75%\", \"60%\"],\n  correct: \"85%\",\n  questionID: \"1\"\n},\n\n{\n  question: \"What country is named after a tree?\",\n  answers: [\"Peru\", \"Brazil\", \"Spain\", \"Portugal\"],\n  correct: \"Brazil\",\n  questionID: \"2\"\n},\n\n{\n  question: \"Where does the suicide plant grow?\",\n  answers: [\"Singapoire\", \"Malaysia\", \"Australia\", \"Hong Kong\"],\n  correct: \"Australia\",\n  questionID: \"3\"\n},\n\n{\n  question: \"Where was the first founded botanical garden?\",\n  answers: [\"Italy\", \"San Remo\", \"Vatican\", \"France\" ],\n  correct: \"Vatican\",\n  questionID: \"4\"\n\n},\n\n{\n  question: \"One of the below is the name of the flower\",\n  answers: [\"Hooker's Bum\", \"Hooker's Lips\", \"Lips of an angel\", \"Bubblebe Bum\"],\n  correct: \"Hooker's Lips\",\n  questionID: \"5\"\n},\n\n{\n  question: \"One of the below is the name of the flower\",\n  answers: [\"Hooker's Bum\", \"Hooker's Lips\", \"Lips of an angel\", \"Bubblebe Bum\"],\n  correct: \"Hooker's Lips\",\n  questionID: \"6\"\n},\n{\n  question: \"What is the word's fastest growing plant?\",\n  answers: [\"Bamboo\", \"Sunflower\", \"Grass\", \"Daisy\"],\n  correct: \"Bamboo\",\n  questionID: \"7\"\n}\n\n];\n//pich random 4 questions\nexport default (n = 4) =>\nPromise.resolve(qBank.sort(() => 0.5 - Math.random()).slice(0, n));\n","import React, { useState } from 'react';\n\nconst QuestionBox = ({ question, options, selected }) => {\n  const [answer, setAnswer] = useState(options);\n  //setanswer refers to a function that can be used to update the value of the answer variable. With this in place, I will use the map function on the answer variable to render a series of buttons\n  return (\n    <div className=\"questionBox\">\n    <div className=\"question\"> {question} </div>\n    {answer.map((text, index) => (\n      <button key={index} className=\"answerBtn\" onClick={()=> {\n        setAnswer([text]);\n        selected(text);\n      }}\n        >\n        {text}\n      </button>\n    ))}\n    </div>\n  );\n}\n\nexport default QuestionBox;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image } from 'cloudinary-react';\nimport axios from 'axios';\nimport serverURL from \"../ServerURL\";\n\nconst SERVER_URL = serverURL('plants.json');\n\n\nclass PlantContainer extends Component {\n  constructor() {\n      super();\n      this.state={\n        plants : [],\n\n      };\n\n    const fetchingPlants =() => {\n      axios.get(SERVER_URL).then((result) => {\n\n        this.setState({plants: result.data[0]});\n        console.log(result.data);\n\n\n      });\n    };\n    fetchingPlants();\n\n  }\n\n  render(){\n    return(\n\n      <div>\n        {\n        <p key={this.state.plants.id}> Your spirit plant is:\n             {this.state.plants.name} </p>}\n             <Link to={ \"/plants/58\" }>\n             <Image cloudName=\"dto4pzoz6\" publicId={this.state.plants.images} width=\"300\" className=\"allPlantsShow\" />\n             </Link>\n      </div>\n    )\n  }\n}\n\nconst Result = ({ score, playAgain}) => (\n  <div className=\"score-board\">\n  <div className=\"score\"> You scored {score} / 4 </div>\n  <button className=\"playBtn\" onClick={playAgain}>\n  Play Again!\n  </button>\n  <PlantContainer />\n</div>\n);\n\nexport default Result;\n","import React, { Component } from 'react';\nimport ReactDOM from \"react-dom\";\nimport quizService from \"../quizService\";\nimport QuestionBox from \"./QuestionBox\";\nimport serverURL from \"../ServerURL\";\nimport Result from \"./Result\";\n\nclass Quiz extends Component {\n  state = {\n    questionBank: [],\n    score: 0,\n    responses: 0,\n    \n  };\n\n//invokes quizzService API and proceeds to populate the questionBank state variable with the results.\n\n\n\n  break;\n\n\n\n\ngetQuestions = () =>{\n  quizService().then(question => {\n    this.setState({\n      questionBank: question\n    });\n  });\n};\n\n\ncomputeAnswer = (answer, correctAnswer) => {\n  if (answer === correctAnswer) {\nthis.setState({\n  score: this.state.score + 1\n    });\n  }\n  this.setState({\n    responses: this.state.responses < 4 ? this.state.responses + 1 : 5\n  });\n};\n\nplayAgain = () => {\nthis.getQuestions();\nthis.setState({\n  score: 0,\n  responses: 0\n    });\n  };\n\n//we used the componentDidMount lifecycle method to bring in a set of question objects from our API and we populated a state variable with this data. We then render the question text from this data in our JSX template\ncomponentDidMount() {\n  this.getQuestions();\n}\n\n  render() {\n    return (\n      <div className=\"container\">\n\n      <div className=\"title\"> Quiz </div>\n        {this.state.questionBank.length > 0 && this.state.responses < 4 && this.state.questionBank.map(({question, answers, correct, questionID}) => (<QuestionBox question={question} options={answers} key={questionID} selected={answer => this.computeAnswer(answer, correct)}/>\n        )\n      )}\n\n      {this.state.responses === 4 ? (<Result score={this.state.score} playAgain={this.playAgain} />) : null }\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Quiz />, document.getElementById(\"root\"));\n\nexport default Quiz;\n","import React from 'react';\nimport { HashRouter as Router, Route, Switch } from 'react-router-dom';\nimport './style/style.css';\n\nimport Home from './components/Home';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport SignUp from './components/SignUp';\nimport SignIn from './components/SignIn';\nimport SignOut from './components/SignOut';\nimport PlantContainer from './components/PlantContainer';\nimport CreatePlant from './components/CreatePlant';\nimport EditPlant from './components/EditPlant';\nimport UserProfile from './components/UserProfile';\nimport Users from './components/Users';\nimport Bookings from './components/Bookings';\nimport PlantInfo from './components/PlantInfo';\nimport Quiz from './components/Quiz';\n\n\n// TODO: make Header refresh like the rest of the pages. e.g. when you logout it wont refresh the navbar automatically.\nconst Routes = (\n    <Router>\n\n      <Header />\n        <div className=\"wrapper\">\n        <div>\n        <Switch>\n          <Route exact path=\"/\" component= { Home } />\n          <Route exact path=\"/plants\" component= { PlantContainer } />\n          <Route exact path=\"/plants/new\" component= { CreatePlant } />\n          <Route exact path=\"/plants/:id\" component={ PlantInfo } />\n          <Route exact path=\"/plants/:id/edit\" component= { EditPlant } />\n          <Route exact path=\"/users/:id\" component= { UserProfile } />\n          <Route exact path=\"/users\" component= { Users } />\n          <Route exact path=\"/bookings\" component= { Bookings } />\n          <Route exact path=\"/quiz\" component= { Quiz } />\n          <Route exact path=\"/SignUp\" component= { SignUp } />\n          { localStorage.getItem(\"jwt\") ?\n              <Route exact path=\"/SignOut\" component= { SignOut } />\n              :\n              <Route exact path=\"/SignIn\" component= { SignIn } />\n          }\n        </Switch>\n        </div>\n        </div>\n        <Footer />\n\n    </Router>\n)\n\nexport default Routes;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './Routes';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(Routes , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/leaf_dark.173f02d7.png\";","module.exports = __webpack_public_path__ + \"static/media/leaf_green.0ed838a1.png\";","module.exports = __webpack_public_path__ + \"static/media/boy-1.8547ceae.svg\";","module.exports = __webpack_public_path__ + \"static/media/boy.eae74d36.svg\";","module.exports = __webpack_public_path__ + \"static/media/girl-1.038dbd32.svg\";","module.exports = __webpack_public_path__ + \"static/media/girl.cd63945d.svg\";","module.exports = __webpack_public_path__ + \"static/media/man-1.dabcdaa2.svg\";","module.exports = __webpack_public_path__ + \"static/media/man-2.333fa0cb.svg\";","module.exports = __webpack_public_path__ + \"static/media/man-3.fcfc134f.svg\";","module.exports = __webpack_public_path__ + \"static/media/man-4.bef3aabb.svg\";","module.exports = __webpack_public_path__ + \"static/media/man.93ef09bc.svg\";"],"sourceRoot":""}